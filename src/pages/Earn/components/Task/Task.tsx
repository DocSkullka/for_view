import cx from 'classnames';
import { TaskMask } from '../TaskMask/TaskMask.tsx';
import Done from '@/assets/done.svg?react';
import styles from './task.module.scss';
import { formatNumberWithCommas } from '@/utils/format.ts';
import { useCallback } from 'react';
import { openTelegramLink } from '@telegram-apps/sdk';
import { Task as TaskType } from '@/services/types.ts';

type Props = {
  task: TaskType;
  submitTask: (id: string) => Promise<void>;
};

export function Task({ task, submitTask }: Props) {
  const { reward, title, id, task_url, done } = task;

  const handleTaskClick = useCallback(async () => {
    if (task_url.startsWith('https://t.me/')) {
      openTelegramLink(task_url);
    } else {
      window.open(task_url, '_blank');
      await submitTask(id);
    }
  }, [done, id, task_url, submitTask]);

  return (
    <div className={styles.taskWrapper}>
      {title === 'Subscribe to X' ? (
        <svg width="80" height="80" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg" className={styles.taskImage}>
          <mask id="path-1-inside-1_12_2127" fill="white">
            <path d="M0 12.8C0 5.73076 5.73076 0 12.8 0H51.2C58.2692 0 64 5.73076 64 12.8V51.2C64 58.2692 58.2692 64 51.2 64H12.8C5.73076 64 0 58.2692 0 51.2V12.8Z"/>
          </mask>
          <path d="M0 12.8C0 5.73076 5.73076 0 12.8 0H51.2C58.2692 0 64 5.73076 64 12.8V51.2C64 58.2692 58.2692 64 51.2 64H12.8C5.73076 64 0 58.2692 0 51.2V12.8Z" fill="#1C1C1B"/>
          <path d="M0 12.8C0 5.14165 6.20832 -1.06667 13.8667 -1.06667H50.1333C57.7917 -1.06667 64 5.14165 64 12.8C64 6.31986 58.2692 1.06667 51.2 1.06667H12.8C5.73076 1.06667 0 6.31986 0 12.8ZM64 51.2C64 58.8583 57.7917 65.0667 50.1333 65.0667H13.8667C6.20832 65.0667 0 58.8583 0 51.2V51.2C0 57.6801 5.73076 62.9333 12.8 62.9333H51.2C58.2692 62.9333 64 57.6801 64 51.2V51.2ZM0 64V0V64ZM64 0V64V0Z" fill="white" mask="url(#path-1-inside-1_12_2127)"/>
          <path d="M12.5857 14.3384L27.2965 34.0121L12.4941 50.0082H15.8265L28.7872 36.0041L39.2582 50.0082H50.5963L35.0586 29.2278L48.8373 14.3384H45.505L33.5701 27.2359L23.9261 14.3384H12.5879H12.5857ZM17.4848 16.7931H22.6924L45.6927 47.5535H40.4852L17.4848 16.7931Z" fill="white"/>
        </svg>
      ) : (
        <svg width="80" height="80" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg" className={styles.taskImage}>
          <mask id="path-1-inside-1_12_2111" fill="white">
            <path d="M0 12.8C0 5.73076 5.73076 0 12.8 0H51.2C58.2692 0 64 5.73076 64 12.8V51.2C64 58.2692 58.2692 64 51.2 64H12.8C5.73076 64 0 58.2692 0 51.2V12.8Z"/>
          </mask>
          <path d="M0 12.8C0 5.73076 5.73076 0 12.8 0H51.2C58.2692 0 64 5.73076 64 12.8V51.2C64 58.2692 58.2692 64 51.2 64H12.8C5.73076 64 0 58.2692 0 51.2V12.8Z" fill="#00B0F2"/>
          <path d="M0 12.8C0 5.14165 6.20832 -1.06667 13.8667 -1.06667H50.1333C57.7917 -1.06667 64 5.14165 64 12.8C64 6.31986 58.2692 1.06667 51.2 1.06667H12.8C5.73076 1.06667 0 6.31986 0 12.8ZM64 51.2C64 58.8583 57.7917 65.0667 50.1333 65.0667H13.8667C6.20832 65.0667 0 58.8583 0 51.2V51.2C0 57.6801 5.73076 62.9333 12.8 62.9333H51.2C58.2692 62.9333 64 57.6801 64 51.2V51.2ZM0 64V0V64ZM64 0V64V0Z" fill="white" mask="url(#path-1-inside-1_12_2111)"/>
          <path d="M12.711 31.3749L12.5736 31.4436C12.3018 31.5959 12.131 31.7423 12.045 31.9154C11.9009 32.2065 12.0163 32.6926 12.3915 33.0345C12.7686 33.3782 13.2913 33.5581 13.927 33.7555L13.9281 33.7558C15.0892 34.1192 16.2551 34.4715 17.4237 34.8151L17.424 34.8151C18.835 35.2307 20.1793 35.5938 21.4915 35.4068L21.4921 35.4068C22.9598 35.1993 24.2615 34.3245 25.6184 33.3819L25.6184 33.3819C27.6701 31.9567 29.7212 30.531 31.7723 29.1052L31.7761 29.1026C33.826 27.6777 35.876 26.2527 37.9265 24.8283L37.9273 24.8277C38.0974 24.71 38.331 24.5591 38.591 24.4684C38.8566 24.3758 39.2075 24.3268 39.5595 24.4984L12.711 31.3749ZM12.711 31.3749C12.7942 31.3333 12.8784 31.2933 12.962 31.2547L12.9627 31.2544M12.711 31.3749L12.9627 31.2544M12.9627 31.2544C14.4442 30.5681 15.9461 29.9242 17.4545 29.2776L17.4712 29.2704C17.5159 29.2605 17.5523 29.2481 17.5772 29.239C17.6325 29.2186 17.6819 29.1945 17.7163 29.177C17.7403 29.1647 17.7686 29.1496 17.7879 29.1392C17.7943 29.1358 17.7998 29.1328 17.8037 29.1307C17.8168 29.1238 17.8234 29.1205 17.8254 29.1195L17.8272 29.1188L17.8343 29.1157C17.8912 29.091 17.9485 29.0667 18.0081 29.0414L18.0091 29.041C18.0674 29.0162 18.1279 28.9905 18.1887 28.9641C18.189 28.964 18.1893 28.9638 18.1897 28.9637L18.8683 28.6722C18.8685 28.6721 18.8687 28.672 18.869 28.6719C19.0969 28.5746 19.3243 28.4773 19.5515 28.3802L19.5542 28.379C19.7808 28.2822 20.007 28.1854 20.2338 28.0886L20.2342 28.0885C21.1436 27.6996 22.0535 27.3105 22.9635 26.9191M12.9627 31.2544L22.9635 26.9191M45.87 16.5741C45.5559 16.6291 45.2395 16.7804 44.9352 16.9259C44.8194 16.9812 44.7054 17.0358 44.5939 17.0838C43.6836 17.4731 42.7728 17.8629 41.862 18.2527C40.9524 18.642 40.0428 19.0313 39.1337 19.4201C38.224 19.8091 37.3137 20.1987 36.4034 20.5883C35.4933 20.9778 34.5832 21.3674 33.6737 21.7563C32.7638 22.1454 31.8535 22.535 30.9431 22.9247C30.0331 23.3142 29.1231 23.7037 28.2136 24.0926C27.3041 24.4815 26.394 24.871 25.484 25.2605L45.87 16.5741ZM45.87 16.5741C46.058 16.5406 46.2436 16.4911 46.4295 16.4415M45.87 16.5741L46.4295 16.4415M22.9635 26.9191C23.871 26.531 24.7791 26.1423 25.6871 25.7537L25.6934 25.751L25.6988 25.7487C26.6072 25.3599 27.5156 24.9711 28.4233 24.583C29.3294 24.1955 30.2361 23.8074 31.1427 23.4194L31.1535 23.4148L31.1577 23.413C32.0665 23.024 32.9752 22.6351 33.8834 22.2467C34.7922 21.858 35.7016 21.4688 36.6108 21.0797L36.6136 21.0785L36.6178 21.0767C37.5266 20.6877 38.4353 20.2988 39.3434 19.9104C40.2506 19.5225 41.1583 19.134 42.0659 18.7456L42.0737 18.7423L42.081 18.7391C42.9887 18.3506 43.8964 17.9621 44.8036 17.5742L44.805 17.5736C44.9167 17.5254 45.0284 17.4724 45.1328 17.4225L45.1649 17.4072C45.26 17.3618 45.3495 17.319 45.4394 17.2787C45.6415 17.188 45.8113 17.1258 45.9621 17.0994L45.9635 17.0992C46.1711 17.0622 46.372 17.0088 46.5498 16.9614L46.5584 16.9591C46.7395 16.9108 46.8975 16.8686 47.0553 16.8388L47.0557 16.8387C47.7241 16.7119 48.3573 16.6845 48.8711 16.9066C49.0447 16.9826 49.2 17.0869 49.3258 17.2127L49.3279 17.2147C49.6299 17.5137 49.7825 17.9277 49.8295 18.4485C49.877 18.9746 49.8119 19.5574 49.7233 20.1403L49.7233 20.1403L49.2835 23.0357C48.1852 30.2669 47.0867 37.4994 45.9864 44.7302L45.9863 44.7307C45.9015 45.2927 45.8067 45.8372 45.6351 46.3224C45.4651 46.8033 45.2312 47.1908 44.8907 47.4636C44.3181 47.9222 43.4462 48.0066 42.6188 47.7793C41.7865 47.5484 41.0381 47.0608 40.2236 46.5229C38.5597 45.4208 36.8953 44.3187 35.2309 43.2166L35.2284 43.215C33.5647 42.1133 31.9011 41.0117 30.238 39.9101L30.2376 39.9098C29.8483 39.6524 29.479 39.3817 29.2094 39.0804C28.9435 38.7833 28.8112 38.4981 28.814 38.2023L28.814 38.2015C28.8169 37.827 29.0451 37.4466 29.3986 36.9863L29.399 36.9858C30.8092 35.1458 32.5381 33.5851 34.3321 32.014C34.485 31.88 34.6385 31.746 34.7923 31.6117C36.43 30.1811 38.1023 28.7203 39.5487 27.0434C39.8145 26.7354 40.0609 26.2979 40.1482 25.8602C40.1923 25.639 40.2031 25.3802 40.1184 25.1283C40.0281 24.8599 39.8402 24.6352 39.5597 24.4985L22.9635 26.9191ZM46.4295 16.4415C46.604 16.3949 46.7788 16.3483 46.9562 16.3147L46.4295 16.4415Z" fill="#FEFFFC" stroke="white" stroke-width="1.06667"/>
        </svg>
      )}
      <TaskMask
        className={cx(styles.task, {
          [styles.taskDone]: done,
        })}
        onClick={() => handleTaskClick()}
      >
        <div className={styles.content}>
          <div className={styles.info}>
            <p>{title}</p>
            <p>+{formatNumberWithCommas(reward || 0)}</p>
          </div>
        </div>
        {done && (
          <div className={styles.done}>
            <Done />
          </div>
        )}
      </TaskMask>
    </div>
  );
}
